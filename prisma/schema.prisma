/*
my-next-app/
├── app/
│   ├── (auth)/
│   │   ├── dashboard/
│   │   │   ├── page.tsx
│   │   │   └── layout.tsx
│   │   ├── profile/
│   │   │   └── page.tsx
│   │   └── admin/
│   │       ├── posts/
│   │       │   ├── page.tsx
│   │       │   └── [id]/
│   │       │       └── page.tsx
│   │       └── users/
│   │           └── page.tsx
│   ├── api/
│   │   ├── auth/
│   │   │   ├── login/
│   │   │   │   └── route.ts
│   │   │   ├── logout/
│   │   │   │   └── route.ts
│   │   │   └── register/
│   │   │       └── route.ts
│   │   ├── posts/
│   │   │   ├── route.ts
│   │   │   └── [id]/
│   │   │       └── route.ts
│   │   ├── comments/
│   │   │   └── route.ts
│   │   └── users/
│   │       └── route.ts
│   ├── blog/
│   │   ├── page.tsx
│   │   ├── [slug]/
│   │   │   └── page.tsx
│   │   ├── categories/
│   │   │   ├── page.tsx
│   │   │   └── [category]/
│   │   │       └── page.tsx
│   │   └── tags/
│   │       ├── page.tsx
│   │       └── [tag]/
│   │           └── page.tsx
│   ├── page.tsx
│   └── layout.tsx
├── components/
│   ├── ui/
│   │   ├── button.tsx
│   │   ├── input.tsx
│   │   ├── form.tsx
│   │   ├── avatar.tsx
│   │   ├── dialog.tsx
│   │   ├── dropdown-menu.tsx
│   │   └── label.tsx
│   ├── blog/
│   │   ├── post-card.tsx
│   │   ├── post-list.tsx
│   │   └── comment-section.tsx
│   ├── forms/
│   │   ├── post-form.tsx
│   │   ├── user-form.tsx
│   │   └── comment-form.tsx
│   └── layout/
│       ├── header.tsx
│       ├── footer.tsx
│       └── sidebar.tsx
├── lib/
│   ├── prisma/
│   │   └── client.ts
│   ├── auth/
│   │   ├── jwt.ts // Fonctions pour générer et vérifier les JWT
│   │   ├── password.ts // Fonctions pour hacher et vérifier les mots de passe avec bcryptjs
│   │   ├── session.ts // Gestion de session côté client avec zustand
│   │   └── permissions.ts // Vérification des permissions basées sur les rôles
│   │
│   ├── utils/
│   │   ├── date-formatter.ts
│   │   └── string-utils.ts
│   └── validations/
│       ├── post-schema.ts
│       ├── user-schema.ts
│       └── comment-schema.ts
├── stores/
│   └── useUser.ts
│
├── public/
│   ├── images/
│   │   └── logo.svg
│   └── fonts/
│       └── inter.woff2
├── styles/
│   └── globals.css
├── middleware.ts
├── next.config.js
├── package.json
├── tsconfig.json
├── .env
├── .gitignore
└── prisma/
    ├── schema.prisma
    └── migrations/


*/
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  email       String    @unique
  password    String
  name        String
  bio         String?
  profileImage String?
  roles       Role[]    @relation("UserRoles")
  posts       Post[]    @relation("UserPosts")
  comments    Comment[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String       @unique
  permissions Permission[]
  users       User[]       @relation("UserRoles")
}

model Permission {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  roles       Role[]
}

model Post {
  id          String    @id @default(uuid())
  title       String
  content     String
  status      PostStatus @default(DRAFT)
  author      User      @relation("UserPosts", fields: [authorId], references: [id])
  authorId    String
  comments    Comment[]
  categories  Category[]
  tags        Tag[]
  media       Media[]
  likes       Like[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model Comment {
  id          String    @id @default(uuid())
  content     String
  author      User      @relation(fields: [authorId], references: [id])
  authorId    String
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  createdAt   DateTime  @default(now())
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Tag {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  posts       Post[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Media {
  id          String    @id @default(uuid())
  url         String
  type        MediaType
  title       String?
  description String?
  post        Post      @relation(fields: [postId], references: [id])
  postId      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum MediaType {
  IMAGE
  VIDEO
  DOCUMENT
  AUDIO
}

model Like {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  post      Post     @relation(fields: [postId], references: [id])
  postId    String
  createdAt DateTime @default(now())

  @@unique([userId, postId])
}

model AppSettings {
  id            Int      @id @default(autoincrement())
  key           String   @unique
  value         String
  description   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
/*
{
  "name": "app-blog",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@hookform/resolvers": "^5.0.0",
    "@radix-ui/react-avatar": "^1.1.3",
    "@radix-ui/react-dialog": "^1.1.6",
    "@radix-ui/react-dropdown-menu": "^2.1.6",
    "@radix-ui/react-label": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.2",
    "bcryptjs": "^3.0.2",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "lucide-react": "^0.486.0",
    "next": "15.2.4",
    "next-themes": "^0.4.6",
    "react": "^19.0.0",
    "react-dom": "^19.0.0",
    "sonner": "^2.0.3",
    "tailwind-merge": "^3.1.0",
    "tw-animate-css": "^1.2.5",
    "zod": "^3.24.2",
    "zustand": "^5.0.3"
  },
  "devDependencies": {
    "@eslint/eslintrc": "^3",
    "@tailwindcss/postcss": "^4",
    "@types/bcryptjs": "^2.4.6",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "eslint": "^9",
    "eslint-config-next": "15.2.4",
    "tailwindcss": "^4",
    "typescript": "^5"
  }
}
*/
/*
Explications des modèles :
User : Représente les utilisateurs du système. Chaque utilisateur peut avoir plusieurs rôles et peut créer des articles ou des commentaires.

Role : Définit les rôles (par exemple, admin, éditeur, utilisateur). Chaque rôle peut avoir plusieurs permissions.

Permission : Liste des permissions (par exemple, "view", "edit", "delete"). Les permissions sont associées aux rôles.

Post : Modèle pour les articles de blog. Chaque article est lié à un auteur.

Comment : Modèle pour les commentaires sur les articles de blog.

Points importants :
Les mots de passe doivent être hachés avant d'être enregistrés dans la base de données (utilisez une bibliothèque comme bcrypt).

Pour l'authentification, vous pouvez utiliser JWT ou une solution comme NextAuth.js.

Les autorisations peuvent être gérées via des vérifications au niveau de l'application ou directement dans la base de données avec des 
relations entre rôles et permissions.

J'ai ajouté :

Un système de catégories et tags pour organiser les articles

Un champ de statut pour les articles (brouillon, publié, archivé)

Un modèle Media pour gérer les images et autres médias associés aux articles

Un système de likes pour les réactions aux articles

Des champs supplémentaires pour le profil utilisateur (bio, image de profil)

Un modèle AppSettings pour stocker les paramètres globaux de l'application



*/

